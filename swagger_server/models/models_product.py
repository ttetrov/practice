# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util

from src.build.product import Productbuild


class ModelsProduct(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, category_id: str=None, created_at: str=None, description: str=None, image_url: str=None, name: str=None, photos: List[str]=None, price: float=None, product_id: str=None, quantity: int=None, rating: int=None, updated_at: str=None):  # noqa: E501
        """ModelsProduct - a model defined in Swagger

        :param category_id: The category_id of this ModelsProduct.  # noqa: E501
        :type category_id: str
        :param created_at: The created_at of this ModelsProduct.  # noqa: E501
        :type created_at: str
        :param description: The description of this ModelsProduct.  # noqa: E501
        :type description: str
        :param image_url: The image_url of this ModelsProduct.  # noqa: E501
        :type image_url: str
        :param name: The name of this ModelsProduct.  # noqa: E501
        :type name: str
        :param photos: The photos of this ModelsProduct.  # noqa: E501
        :type photos: List[str]
        :param price: The price of this ModelsProduct.  # noqa: E501
        :type price: float
        :param product_id: The product_id of this ModelsProduct.  # noqa: E501
        :type product_id: str
        :param quantity: The quantity of this ModelsProduct.  # noqa: E501
        :type quantity: int
        :param rating: The rating of this ModelsProduct.  # noqa: E501
        :type rating: int
        :param updated_at: The updated_at of this ModelsProduct.  # noqa: E501
        :type updated_at: str
        """
        self.swagger_types = {
            'category_id': str,
            'created_at': str,
            'description': str,
            'image_url': str,
            'name': str,
            'photos': List[str],
            'price': float,
            'product_id': str,
            'quantity': int,
            'rating': int,
            'updated_at': str
        }

        self.attribute_map = {
            'category_id': 'CategoryId',
            'created_at': 'createdAt',
            'description': 'description',
            'image_url': 'imageUrl',
            'name': 'name',
            'photos': 'photos',
            'price': 'price',
            'product_id': 'productId',
            'quantity': 'quantity',
            'rating': 'rating',
            'updated_at': 'updatedAt'
        }
        self.result = Productbuild().build()

        self._category_id = self.result["category_id"]
        self._created_at = self.result["created_at"]
        self._description = self.result["description"]
        self._image_url = self.result["image_url"]
        self._name = self.result["name"]
        self._photos = self.result["photos"]
        self._price = self.result["price"]
        self._product_id = self.result["product_id"]
        self._quantity = self.result["quantity"]
        self._rating = self.result["rating"]
        self._updated_at = self.result["updated_at"]

    @classmethod
    def from_dict(cls, dikt) -> 'ModelsProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The models.Product of this ModelsProduct.  # noqa: E501
        :rtype: ModelsProduct
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self) -> str:
        """Gets the category_id of this ModelsProduct.


        :return: The category_id of this ModelsProduct.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id: str):
        """Sets the category_id of this ModelsProduct.


        :param category_id: The category_id of this ModelsProduct.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def created_at(self) -> str:
        """Gets the created_at of this ModelsProduct.


        :return: The created_at of this ModelsProduct.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this ModelsProduct.


        :param created_at: The created_at of this ModelsProduct.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self) -> str:
        """Gets the description of this ModelsProduct.


        :return: The description of this ModelsProduct.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ModelsProduct.


        :param description: The description of this ModelsProduct.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def image_url(self) -> str:
        """Gets the image_url of this ModelsProduct.


        :return: The image_url of this ModelsProduct.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this ModelsProduct.


        :param image_url: The image_url of this ModelsProduct.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def name(self) -> str:
        """Gets the name of this ModelsProduct.


        :return: The name of this ModelsProduct.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ModelsProduct.


        :param name: The name of this ModelsProduct.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def photos(self) -> List[str]:
        """Gets the photos of this ModelsProduct.


        :return: The photos of this ModelsProduct.
        :rtype: List[str]
        """
        return self._photos

    @photos.setter
    def photos(self, photos: List[str]):
        """Sets the photos of this ModelsProduct.


        :param photos: The photos of this ModelsProduct.
        :type photos: List[str]
        """

        self._photos = photos

    @property
    def price(self) -> float:
        """Gets the price of this ModelsProduct.


        :return: The price of this ModelsProduct.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this ModelsProduct.


        :param price: The price of this ModelsProduct.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def product_id(self) -> str:
        """Gets the product_id of this ModelsProduct.


        :return: The product_id of this ModelsProduct.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id: str):
        """Sets the product_id of this ModelsProduct.


        :param product_id: The product_id of this ModelsProduct.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def quantity(self) -> int:
        """Gets the quantity of this ModelsProduct.


        :return: The quantity of this ModelsProduct.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this ModelsProduct.


        :param quantity: The quantity of this ModelsProduct.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def rating(self) -> int:
        """Gets the rating of this ModelsProduct.


        :return: The rating of this ModelsProduct.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating: int):
        """Sets the rating of this ModelsProduct.


        :param rating: The rating of this ModelsProduct.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501

        self._rating = rating

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this ModelsProduct.


        :return: The updated_at of this ModelsProduct.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this ModelsProduct.


        :param updated_at: The updated_at of this ModelsProduct.
        :type updated_at: str
        """

        self._updated_at = updated_at
